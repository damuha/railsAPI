require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe TicketsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Ticket. As you add validations to Ticket, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TicketsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    before do
      @ticket = FactoryBot.create_list(:tickets, 3)
    end
    it "リクエスト成功　200" do
      get :index, params: {}, session: valid_session
      expect(response.status).to eq(200)
    end
    it "users情報取得成功" do
      get :index, params: {}, session: valid_session
      expect(assigns (:users)).to eq @user
    end
  end

  describe "GET #show" do
    before do
      @ticket = FactoryBot.create(:tickets)
    end
    it "リクエスト成功　200" do
      get :show, params: {id: @ticket.id}, session: valid_session
      expect(response.status).to eq(200)
    end
    it "ticket情報取得成功" do
      get :show, params: { id: @ticket.id}, session: valid_session
      expect(assigns :ticket).to eq @ticket
    end
  end

  describe "POST #create" do
      before do
        @ticket = FactoryBot.attributes_for(:tickets)
      end
      it "リクエスト成功　201" do
          post :create, params: { ticket: @ticket }
          expect(response.status).to eq(201)
      end
  
      it "ユーザーが登録成功" do
        expect do
          post :create, params: { ticket: @ticket }
          expect(response.status).to eq(201)
        end.to change(Ticket, :count).by(1)
      end

      it "renders a JSON response with the new ticket" do

        post :create, params: {ticket: valid_attributes}, session: valid_session
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/json')
        expect(response.location).to eq(ticket_url(Ticket.last))
      end

    context "with invalid params" do
      it "renders a JSON response with errors for the new ticket" do

        post :create, params: {ticket: invalid_attributes}, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }
      let(:users) { FactoryBot.create :users }
      let(:ticket_update_before) { FactoryBot.create(:tickets, user_id: users.user_id) }
      let(:ticket_update_after) { FactoryBot.create(:tickets) }

      it "リクエスト成功　200" do
          put :update, params: { id: ticket_update_before, tickets: FactoryBot.attributes_for(:ticket_update_after)}, session: valid_session
          expect(response.status).to eq(200)
      end

      it "値更新成功" do
        expect do
          put :update, params: { id: ticket_update_before, tickets: FactoryBot.attributes_for(:ticket_update_after)}, session: valid_session
        end.to change {Ticket.find(ticket_update_before.id).give_flg}.from(0).to(2)
      end

      it "updates the requested ticket" do
        ticket = Ticket.create! valid_attributes
        put :update, params: {id: ticket.to_param, ticket: new_attributes}, session: valid_session
        ticket.reload
        skip("Add assertions for updated state")
      end

      it "renders a JSON response with the ticket" do
        ticket = Ticket.create! valid_attributes

        put :update, params: {id: ticket.to_param, ticket: valid_attributes}, session: valid_session
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq('application/json')
      end
    end

    context "with invalid params" do
      it "renders a JSON response with errors for the ticket" do
        ticket = Ticket.create! valid_attributes

        put :update, params: {id: ticket.to_param, ticket: invalid_attributes}, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested ticket" do
      ticket = Ticket.create! valid_attributes
      expect {
        delete :destroy, params: {id: ticket.to_param}, session: valid_session
      }.to change(Ticket, :count).by(-1)
    end
  end

end
